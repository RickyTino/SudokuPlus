开题意见：
1、难度分级，闯关；
思路：能用首两种算法完成的算简单，要用DFS算法且已知数个数小于一定数量的为困难；
2、计时，倒计时；
思路：timer；

0301
- 思考一下怎么切换模式；
√ Check分两种：检查当前合法性/是否完成。
√ 把背景色的恢复改为全部扫一遍，利于后面X数独等的安排；
- 创建枚举类型搞不同数独；
√ 将NS和HS的处理封装一下，DFS中要复用
- 游玩模式下，点击一个数需要点亮所有的同样的数字，参考Andoku
√、思考怎么样能够在DFS的编程过程中追踪运行结果，提高调试效率；

0302
- 空格的问题，和button焦点那个问题也冲突，斟酌。解决该问题后进行备份，以备应对中期；
  : 空格控制已去掉。
- 参见0301点6和点1，明天需要解决的问题。
√ 优化一下输入方面，包括小键盘输入之类。提高输入体验。
- 查数独解情况与数字个数的关系
- 从随机-合法检查开始，到一定个数之后用DFS产生一个完整数独，后用随机消去法控制难度生成一个数独谜题
  
√ 写一个随机函数，从一个1-9的布尔数组中，随机抽取true的数


中期意见：
1、游戏性：等级，提示【限次数】，等等。变成游戏的方式去做。外观；速度/难度【计时等】提供选择。
2、排行榜 x
3、算法：关键点，多加分；【DFS和SimpleSolve的边界】X
4、提示的开关，也可以用来区分难度。
5、设计感。
6、过程的记录，复盘；【专业人士的需求】加备注【解题思路】
7、

中期后：
- 研究数独生成算法；
- 设计布局
  - 模式的切换设计
  - 计时工具
  - 难度分级，难度取决于数字个数、出题方式、是否给提示。
  - 提示（数字高亮【有开关】，检查正误，1次机会揭晓填数）
- 查数独解情况与数字个数的关系；
- 复盘存储；

0302下午问题笔记
- 关于效率，重构DFS模块，注意顺序，剪枝。




//一个不靠谱的草稿
function DFS(sd: TSudoku): boolean;
//返回值标记是否有解；
//var略，直接用
begin

检查合法性：不合法返回false

检查完成度：完成则对解进行记录，返回true

循环节前flag置false

循环节：对于每个新的草稿：
  创建sd1，复制sd，sd1实现草稿，simplesolve，递归sd1，获取返回值，false就continue，true则将flag置true【表示该节点下的枝干存在解】并且将sd中草稿与解相同的部分去除；



0305整理
1 解算数独部分
  √ 重构DFS模块，注意顺序，剪枝
  √ 为优化效率，不论有多少个解，算出一个就退出。
  √ 选择一种新的DFS模式来确认是否有多解。
  - DFS思考：回传性？是否在意被改动？

2 程序结构
  √ 修改使得CurSdk只用于显示，不直接用于其它计算用途。
  
3 数独生成算法
  √ 生成一个完整数独，研究算法【1-9依次填入九宫的算法能优化效率】
  √ 随机挖坑使得有解【每挖一个坑用DFS验证】

4 计时工具timer
  - 计算机解算的计时
  - 人力解算的计时

5 设计布局
  - 模式的切换设计【解算模式、出题模式、闯关模式（选）】
  - 按键的排布
  √ 难度分级，难度取决于数字个数、出题方式、是否给提示。
  √ 提示（数字高亮【有开关】，检查正误，1次机会揭晓填数）
  - 左键填数，右键草稿？
  - 区分用户输入的数字和题目的数字！

6 附加功能
  - 复盘存储

EX： 查数独解情况与数字个数的关系；


0309
1、需要把DFS的回传机制进行整理。包括是否多解。尽量再次避免使用全局变量。这不是个好习惯。
2、理顺思路将BUG摒除。




后期：
- 界面
  - 原题目字体加粗、不可修改；
  - 理顺草稿层的关系；
- 复盘存储


20170621 
1. 在同一个地方多次输入点亮多个方块的BUG
2. Edit和局面同时输入的BUG，焦点的问题。





  - 